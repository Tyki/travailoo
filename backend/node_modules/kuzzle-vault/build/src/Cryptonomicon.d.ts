/// <reference types="node" />
/**
 * Cryptonomicon is a book serie from Neal Stephenson.
 *
 * Between technological thriller and revisited history,
 * Cryptonomicon is a must read for anyone interested in cryptography ;-)
 */
export default class Cryptonomicon {
    vaultKeyHash: Buffer;
    emptyKey: boolean;
    /**
     * Prepare crypto primitives.
     * Use the key passed in parameter or in environment variable.
     *
     * @param {string?} vaultKey - key used to decrypt the secrets
     */
    constructor(vaultKey?: string);
    /**
     * Iterates recursively through object values and tries to
     * decrypt strings only.
     *
     * @param {object} encryptedSecrets - object containing the encrypted secrets
     *
     * @returns {Object} Object with decrypted values
     */
    decryptObject(encryptedSecrets: any): any;
    /**
     * Iterates recursively through object values and encrypt string values only.
     *
     * @param {Object} secrets - Object containing secrets to be encrypted
     *
     * @returns {Object} Same object but with encrypted string values
     */
    encryptObject(secrets: any): any;
    /**
     * Encrypts data with AES CBC using the secret key and an initialization vector
     * It's not safe to re-use an IV , so we generate a new IV each time we encrypt
     * something and we store it next to the encrypted data.
     * See https://www.wikiwand.com/en/Block_cipher_mode_of_operation#/Initialization_vector_(IV)
     *
     * @param {string} decrypted - String to encrypt
     *
     * @returns {string} Encrypted string with IV (format: <encrypted-string>.<iv>)
     */
    encryptString(decrypted: string): string;
    /**
     * Decrypts a string with AES CBC using the initialization vector
     * and the sha256 hashed secret key
     *
     * @param {string} encrypted - String to decrypt (format: <encrypted-string>.<iv>)
     *
     * @returns {string} Decrypted string
     */
    decryptString(encrypted: string): string;
}
