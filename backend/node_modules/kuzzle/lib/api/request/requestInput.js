"use strict";
/*
 * Kuzzle, a backend software, self-hostable and ready to use
 * to power modern apps
 *
 * Copyright 2015-2022 Kuzzle
 * mailto: support AT kuzzle.io
 * website: http://kuzzle.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestInput = exports.RequestResource = void 0;
const internalError_1 = require("../../kerror/errors/internalError");
const assert = __importStar(require("../../util/assertType"));
// private properties
// \u200b is a zero width space, used to masquerade console.log output
const _jwt = "jwt\u200b";
const _volatile = "volatile\u200b";
const _body = "body\u200b";
const _headers = "headers\u200b";
const _controller = "controller\u200b";
const _action = "action\u200b";
// any property not listed here will be copied into
// RequestInput.args
const resourceProperties = new Set([
    "jwt",
    "volatile",
    "body",
    "controller",
    "action",
]);
/**
 * @deprecated
 */
class RequestResource {
    constructor(args) {
        this.args = args;
    }
    /**
     * Document ID
     */
    get _id() {
        return this.args._id;
    }
    set _id(str) {
        this.args._id = str;
    }
    /**
     * Index name
     */
    get index() {
        return this.args.index;
    }
    set index(str) {
        this.args.index = str;
    }
    /**
     * Collection name
     */
    get collection() {
        return this.args.collection;
    }
    set collection(str) {
        this.args.collection = str;
    }
}
exports.RequestResource = RequestResource;
/**
 * API request arguments are accessible here.
 *
 * Common arguments are accessible at the root level:
 * "jwt", "volatile", "body", "controller", "action"
 *
 * Every other arguments are accessible under the "args" property. E.g:
 * "_id", "index", "collection", "refresh", "onExistingUser", "foobar", etc.
 */
class RequestInput {
    /**
     * Builds a Kuzzle normalized request input object
     *
     * The 'data' object accepts a request content using the same
     * format as the one used, for instance, for the Websocket protocol
     *
     * Any undefined option is set to null
     */
    constructor(data) {
        if (!data || typeof data !== "object" || Array.isArray(data)) {
            throw new internalError_1.InternalError("Input request data must be a non-null object");
        }
        this[_jwt] = null;
        this[_volatile] = null;
        this[_body] = null;
        this[_controller] = null;
        this[_action] = null;
        // default value to null for former "resources" to avoid breaking
        this.args = {};
        this.resource = new RequestResource(this.args);
        // copy into this.args only unrecognized properties
        for (const k of Object.keys(data)) {
            if (!resourceProperties.has(k)) {
                this.args[k] = data[k];
            }
        }
        // @deprecated - RequestContext.connection.misc.headers should be used instead
        // initialize `_headers` property after the population of `this.args` attribute
        // `this.headers` can contain protocol specific headers and should be
        // set after the Request construction
        // `args.headers` can be an attribute coming from data itself.
        this[_headers] = null;
        Object.seal(this);
        this.jwt = data.jwt;
        this.volatile = data.volatile;
        this.body = data.body;
        this.controller = data.controller;
        this.action = data.action;
    }
    /**
     * Authentication token.
     * @example
     * // original JSON request sent to Kuzzle
     * {
     *   controller
     *   action,
     *   _id,
     *   index,
     *   collection,
     *   jwt,        <== that
     *   refresh,
     *   foobar,
     *   volatile,
     *   body
     *  }
     */
    get jwt() {
        return this[_jwt];
    }
    set jwt(str) {
        this[_jwt] = assert.assertString("jwt", str);
    }
    /**
     * API controller name.
     * @example
     * // original JSON request sent to Kuzzle
     * {
     *   controller  <== that
     *   action,
     *   _id,
     *   index,
     *   collection,
     *   jwt,
     *   refresh,
     *   foobar,
     *   volatile,
     *   body
     *  }
     */
    get controller() {
        return this[_controller];
    }
    set controller(str) {
        // can only be set once
        if (!this[_controller]) {
            this[_controller] = assert.assertString("controller", str);
        }
    }
    /**
     * API action name.
     * @example
     * // original JSON request sent to Kuzzle
     * {
     *   controller
     *   action,      <== that
     *   _id,
     *   index,
     *   collection,
     *   jwt,
     *   refresh,
     *   foobar,
     *   volatile,
     *   body
     *  }
     */
    get action() {
        return this[_action];
    }
    set action(str) {
        // can only be set once
        if (!this[_action]) {
            this[_action] = assert.assertString("action", str);
        }
    }
    /**
     * Request body.
     * In Http it's the request body parsed.
     * @example
     * // original JSON request sent to Kuzzle
     * {
     *   controller
     *   action,
     *   _id,
     *   index,
     *   collection,
     *   jwt,
     *   refresh,
     *   foobar,
     *   volatile,
     *   body         <== that
     *  }
     */
    get body() {
        return this[_body];
    }
    set body(obj) {
        this[_body] = assert.assertObject("body", obj);
    }
    /**
     * Request headers (Http only).
     *
     * @deprecated Use RequestContext.connection.misc.headers instead
     */
    get headers() {
        return this[_headers];
    }
    set headers(obj) {
        this[_headers] = assert.assertObject("headers", obj);
    }
    /**
     * Volatile object.
     * @example
     * // original JSON request sent to Kuzzle
     * {
     *   controller
     *   action,
     *   _id,
     *   index,
     *   collection,
     *   jwt,
     *   refresh,
     *   foobar,
     *   volatile,    <== that
     *   body
     *  }
     */
    get volatile() {
        return this[_volatile];
    }
    set volatile(obj) {
        this[_volatile] = assert.assertObject("volatile", obj);
    }
}
exports.RequestInput = RequestInput;
//# sourceMappingURL=requestInput.js.map