import { KuzzleRequest } from "../request";
import { NativeController } from "./baseController";
export declare class AuthController extends NativeController {
    private anonymousId;
    /**
     * @param {Kuzzle} kuzzle
     * @constructor
     */
    constructor();
    /**
     * Controller initialization: we need the anonymous user identifier for the
     * "isAuthenticated" assertion
     *
     * @returns {Promise}
     */
    init(): Promise<void>;
    createToken(request: KuzzleRequest): Promise<{
        expiresAt: number;
        singleUse: boolean;
        token: string;
        ttl: number;
    }>;
    /**
     * Checks if an API action can be executed by the current user
     */
    checkRights(request: any): Promise<{
        allowed: any;
    }>;
    /**
     * Creates a new API key for the user
     * @param {KuzzleRequest} request
     */
    createApiKey(request: any): Promise<any>;
    /**
     * Search in the user API keys
     */
    searchApiKeys(request: any): Promise<{
        hits: any;
        total: any;
    }>;
    /**
     * Deletes an API key
     */
    deleteApiKey(request: any): Promise<{
        _id: any;
    }>;
    /**
     * Logs the current user out
     *
     * @param {KuzzleRequest} request
     * @returns {Promise<object>}
     */
    logout(request: any): Promise<{
        acknowledged: boolean;
    }>;
    _sendToken(token: any, request: any): Promise<{
        _id: any;
        expiresAt: any;
        ttl: any;
        jwt?: undefined;
    } | {
        _id: any;
        expiresAt: any;
        jwt: any;
        ttl: any;
    }>;
    /**
     * Attempts a login with request informations against the provided strategy;
     * local is used if strategy is not provided.
     *
     * @param {KuzzleRequest} request
     * @returns {Promise<Token>}
     */
    login(request: any): Promise<any>;
    /**
     * Returns the user identified by the given jwt token
     *
     * @param {KuzzleRequest} request
     * @returns {Promise<Object>}
     */
    getCurrentUser(request: any): any;
    /**
     * Returns the rights of the user identified by the given jwt token
     *
     * @param {KuzzleRequest} request
     * @returns {Promise<object>}
     */
    getMyRights(request: any): any;
    /**
     * Checks the validity of a token.
     *
     * @param {KuzzleRequest} request
     * @returns {Promise<object>}
     */
    checkToken(request: any): Promise<{
        expiresAt: any;
        kuid: any;
        valid: boolean;
        state?: undefined;
    } | {
        state: any;
        valid: boolean;
        expiresAt?: undefined;
        kuid?: undefined;
    }>;
    /**
     * Updates the current user if it is not anonymous
     *
     * @param {KuzzleRequest} request
     * @returns {Promise<object>}
     */
    updateSelf(request: any): Promise<any>;
    /**
     * List authentication strategies
     *
     * @returns {Promise.<string[]>}
     */
    getStrategies(): any;
    /**
     * @param {KuzzleRequest} request
     * @returns {Promise.<Object>}
     */
    createMyCredentials(request: any): any;
    /**
     * @param {KuzzleRequest} request
     * @returns {Promise.<Object>}
     */
    updateMyCredentials(request: any): any;
    /**
     * @param {KuzzleRequest} request
     * @returns {Promise.<Object>}
     */
    credentialsExist(request: any): any;
    /**
     * @param {KuzzleRequest} request
     * @returns {Promise.<Object>}
     */
    validateMyCredentials(request: any): any;
    /**
     * @param {KuzzleRequest} request
     * @returns {Promise.<Object>}
     */
    deleteMyCredentials(request: any): any;
    /**
     * @param {KuzzleRequest} request
     * @returns {Promise.<Object>}
     */
    getMyCredentials(request: any): any;
    /**
     * @param {KuzzleRequest} request
     */
    refreshToken(request: any): Promise<{
        _id: any;
        expiresAt: any;
        ttl: any;
        jwt?: undefined;
    } | {
        _id: any;
        expiresAt: any;
        jwt: any;
        ttl: any;
    }>;
    assertIsAuthenticated(request: any): void;
}
