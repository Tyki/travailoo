import { JSONObject } from "kuzzle-sdk";
import { Token } from "../../model/security/token";
import { Repository } from "../shared/repository";
import { User } from "../../model/security/user";
export declare class TokenRepository extends Repository<Token> {
    private tokenGracePeriod;
    private anonymousToken;
    constructor(opts?: JSONObject);
    init(): Promise<void>;
    /**
     * Expires the given token immediately
     */
    expire(token: Token): Promise<void>;
    /**
     * We allow a grace period before expiring the token to allow
     * queued requests to execute, but we mark the token as "refreshed" to forbid
     * any refreshes on that token, to prevent token bombing
     *
     * @param user
     * @param requestToken
     * @param expiresIn - new token expiration delay
     */
    refresh(user: User, token: Token, expiresIn: string): Promise<Token>;
    /**
     * @param user
     * @param options - { algorithm, expiresIn, bypassMaxTTL (false), type (authToken) }
     *
     * @returns {Promise.<Object>} { _id, jwt, userId, ttl, expiresAt }
     */
    generateToken(user: User, { algorithm, expiresIn, bypassMaxTTL, type, singleUse, }?: {
        algorithm?: string;
        expiresIn?: string;
        bypassMaxTTL?: boolean;
        type?: string;
        singleUse?: boolean;
    }): Promise<Token>;
    /**
     * Persists a token in the cache
     *
     * @param encodedToken - Encoded token
     * @param userId - User ID
     * @param ttl - TTL in ms (-1 for infinite duration)
     */
    persistForUser(encodedToken: string, userId: string, { ttl, singleUse, }: {
        ttl: number;
        singleUse: boolean;
    }): Promise<Token>;
    verifyToken(token: string): Promise<Token>;
    removeTokenPrefix(token: string): string;
    loadForUser(userId: string, encodedToken: string): Promise<Token>;
    hydrate(userToken: any, data: any): Promise<any>;
    serializeToDatabase(token: any): any;
    /**
     * Deletes tokens affiliated to the provided user identifier
     */
    deleteByKuid(kuid: string, { keepApiKeys }?: {
        keepApiKeys?: boolean;
    }): Promise<void>;
    /**
     * Loads authentication token from API key into Redis
     */
    private loadApiKeys;
    /**
     * The repository main class refreshes automatically the TTL
     * of accessed entries, letting only unaccessed entries expire
     *
     * But tokens' TTL must remain the same than their expiration time,
     * refreshing a token entry has no meaning.
     *
     * So we need to override the TTL auto-refresh function to disable it
     */
    refreshCacheTTL(): void;
}
