import { EventDefinition, ClusterEventHandler } from "../../../index";
export declare class BackendCluster {
    /**
     * Broadcasts an event to listeners across all registered Kuzzle nodes
     *
     * @param  {string}        event
     * @param  {JSONObject}    payload
     * @return {Promise<void>}
     */
    broadcast<TEventDefinition extends EventDefinition = EventDefinition>(event: TEventDefinition["name"], payload: TEventDefinition["args"][0]): Promise<void>;
    /**
     * Registers a listener to the provided event name.
     *
     * @param  {string}        event
     * @param  {ClusterEventHandler}      listener
     * @return {Promise<void>}       [description]
     */
    on<TEventDefinition extends EventDefinition = EventDefinition>(event: TEventDefinition["name"], listener: ClusterEventHandler<TEventDefinition>): Promise<void>;
    /**
     * Registers a listener to the provided event name. This listener can be
     * invoked only once, after which it will be removed from the listeners list.
     *
     * @param  {string}        event
     * @param  {ClusterEventHandler}      listener
     * @return {Promise<void>}
     */
    once<TEventDefinition extends EventDefinition = EventDefinition>(event: TEventDefinition["name"], listener: ClusterEventHandler<TEventDefinition>): Promise<void>;
    /**
     * Removes a listener from an event.
     * If multiple instances of the same listener are registered, only the first
     * one is removed.
     *
     * @param  {string}        event
     * @param  {ClusterEventHandler}      listener
     * @return {Promise<void>}
     */
    off<TEventDefinition extends EventDefinition = EventDefinition>(event: TEventDefinition["name"], listener: ClusterEventHandler<TEventDefinition>): Promise<void>;
    /**
     * Removes all listeners from an event.
     *
     * @param  {string}        event
     * @return {Promise<void>}
     */
    removeAllListeners(event: string): Promise<void>;
}
