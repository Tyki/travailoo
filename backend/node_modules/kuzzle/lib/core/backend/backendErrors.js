"use strict";
/*
 * Kuzzle, a backend software, self-hostable and ready to use
 * to power modern apps
 *
 * Copyright 2015-2022 Kuzzle
 * mailto: support AT kuzzle.io
 * website: http://kuzzle.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackendErrors = void 0;
const kerror = __importStar(require("../../kerror"));
const index_1 = require("./index");
class BackendErrors extends index_1.ApplicationManager {
    constructor(application) {
        super(application);
        this.domains = {};
    }
    /**
     * Register a new standard KuzzleError
     *
     * @param domain Domain name
     * @param subDomain Subdomain name
     * @param name Standard error name
     * @param definition Standard error definition
     *
     * @example
     * ```
     * app.errors.register('app', 'api', 'custom', {
     *   class: 'BadRequestError',
     *   description: 'This is a custom error from API subdomain',
     *   message: 'Custom API error: %s',
     * });
     * ```
     */
    register(domain, subDomain, name, definition) {
        if (!this.domains[domain]) {
            this.domains[domain] = {
                code: Object.keys(this.domains).length,
                subDomains: {},
            };
        }
        if (!this.domains[domain].subDomains[subDomain]) {
            this.domains[domain].subDomains[subDomain] = {
                code: Object.keys(this.domains[domain].subDomains).length,
                errors: {},
            };
        }
        this.domains[domain].subDomains[subDomain].errors[name] = {
            code: Object.keys(this.domains[domain].subDomains[subDomain].errors)
                .length,
            ...definition,
        };
    }
    /**
     * Get a standardized KuzzleError
     *
     * @param domain Domain name
     * @param subDomain Subdomain name
     * @param name Standard error name
     * @param placeholders Other placeholder arguments
     *
     * @example throw app.errors.get('app', 'api', 'custom', 'Tbilisi');
     *
     * @returns Standardized KuzzleError
     */
    get(domain, subDomain, name, ...placeholders) {
        return kerror.rawGet(this.domains, domain, subDomain, name, ...placeholders);
    }
    /**
     * Get a standardized KuzzleError from an existing error to keep the stacktrace
     *
     * @param source Original error
     * @param domain Domain name
     * @param subDomain Subdomain name
     * @param name Standard error name
     * @param placeholders Other placeholder arguments
     *
     * @returns Standardized KuzzleError
     */
    getFrom(source, domain, subDomain, name, ...placeholders) {
        return kerror.rawGetFrom(this.domains, source, domain, subDomain, name, ...placeholders);
    }
    /**
     * Wrap an error manager on the domain and subDomain
     *
     * @param domain Domain name
     * @param subDomain Subdomain to wrap to
     */
    wrap(domain, subDomain) {
        return kerror.rawWrap(this.domains, domain, subDomain);
    }
}
exports.BackendErrors = BackendErrors;
//# sourceMappingURL=backendErrors.js.map