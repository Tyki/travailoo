"use strict";
/*
 * Kuzzle, a backend software, self-hostable and ready to use
 * to power modern apps
 *
 * Copyright 2015-2022 Kuzzle
 * mailto: support AT kuzzle.io
 * website: http://kuzzle.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackendVault = void 0;
const vault_1 = __importDefault(require("../../kuzzle/vault"));
const kerror = __importStar(require("../../kerror"));
const index_1 = require("./index");
const runtimeError = kerror.wrap("plugin", "runtime");
class BackendVault extends index_1.ApplicationManager {
    constructor() {
        super(...arguments);
        this.decrypted = false;
    }
    /**
     * Secret key to decrypt encrypted secrets.
     */
    set key(key) {
        if (this._application.started) {
            throw runtimeError.get("already_started", "vault");
        }
        this._application._vaultKey = key;
    }
    /**
     * File containing encrypted secrets
     */
    set file(file) {
        if (this._application.started) {
            throw runtimeError.get("already_started", "vault");
        }
        this._application._secretsFile = file;
    }
    /**
     * Decrypted secrets
     */
    get secrets() {
        // We need to load the secrets before Kuzzle start so we can use them
        // in the configuration (e.g. configure ES X-Pack credentials)
        if (!this._application.started && !this.decrypted) {
            const kuzzleVault = vault_1.default.load(this._application._vaultKey, this._application._secretsFile);
            this._secrets = kuzzleVault.secrets;
        }
        if (this._application.started) {
            return this._kuzzle.vault.secrets;
        }
        return this._secrets;
    }
}
exports.BackendVault = BackendVault;
//# sourceMappingURL=backendVault.js.map