"use strict";
/*
 * Kuzzle, a backend software, self-hostable and ready to use
 * to power modern apps
 *
 * Copyright 2015-2022 Kuzzle
 * mailto: support AT kuzzle.io
 * website: http://kuzzle.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackendPlugin = void 0;
const Inflector_1 = require("../../util/Inflector");
const kerror = __importStar(require("../../kerror"));
const index_1 = require("./index");
const didYouMean_1 = __importDefault(require("../../util/didYouMean"));
const assertionError = kerror.wrap("plugin", "assert");
const runtimeError = kerror.wrap("plugin", "runtime");
class BackendPlugin extends index_1.ApplicationManager {
    /**
     * Uses a plugin in this application.
     *
     * Plugin name will be inferred from the class name.
     * e.g. `DeviceManagerPlugin` => `device-manager`
     *
     * @param plugin - Plugin instance
     * @param options - Additionnal options
     *    - `name`: Specify a plugin's name instead of using the class name.
     *    - `manifest`: Manually add a manifest definition
     *    - `deprecationWarning`: If false, does not display deprecation warnings
     */
    use(plugin, options = {}) {
        if (this._application.started) {
            throw runtimeError.get("already_started", "plugin");
        }
        // Avoid plain objects
        if ((typeof plugin.constructor !== "function" ||
            plugin.constructor.name === "Object") &&
            !options.name) {
            throw assertionError.get("no_name_provided");
        }
        const name = options.name ||
            Inflector_1.Inflector.kebabCase(plugin.constructor.name.replace("Plugin", ""));
        if (!this._application.PluginObject.checkName(name)) {
            throw assertionError.get("invalid_plugin_name", name);
        }
        if (this._application._plugins[name]) {
            throw assertionError.get("name_already_exists", name);
        }
        if (typeof plugin.init !== "function") {
            throw assertionError.get("init_not_found", name);
        }
        this._application._plugins[name] = { options, plugin };
    }
    /**
     * Gets the instance of an already loaded plugin.
     *
     * @param name Plugin name
     */
    get(name) {
        if (!this._application._plugins[name]) {
            throw assertionError.get("plugin_not_found", name, (0, didYouMean_1.default)(name, this.list()));
        }
        return this._application._plugins[name].plugin;
    }
    /**
     * Lists loaded plugins
     */
    list() {
        return Object.keys(this._application._plugins);
    }
}
exports.BackendPlugin = BackendPlugin;
//# sourceMappingURL=backendPlugin.js.map