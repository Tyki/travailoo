"use strict";
/*
 * Kuzzle, a backend software, self-hostable and ready to use
 * to power modern apps
 *
 * Copyright 2015-2022 Kuzzle
 * mailto: support AT kuzzle.io
 * website: http://kuzzle.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackendSubscription = void 0;
const request_1 = require("../../api/request");
const kerror = __importStar(require("../../kerror"));
const index_1 = require("./index");
const runtimeError = kerror.wrap("plugin", "runtime");
class BackendSubscription extends index_1.ApplicationManager {
    /**
     * Registers a new realtime subscription on the specified connection
     *
     * @param connection Connection to register the subscription on
     * @param index Index name
     * @param collection Collection name
     * @param filters Subscription filters
     * @param options.volatile Volatile data
     * @param options.scope Subscription scope
     * @param options.users Option for users notifications
     */
    async add(connection, index, collection, filters, { volatile, scope, users, } = {}) {
        if (!this._application.started) {
            throw runtimeError.get("unavailable_before_start", "subscriptions.add");
        }
        const subscriptionRequest = new request_1.KuzzleRequest({
            action: "subscribe",
            body: filters,
            collection,
            controller: "realtime",
            index,
            scope,
            users,
        }, {
            connectionId: connection.id,
            volatile,
        });
        const { channel, roomId } = await global.kuzzle.ask("core:realtime:subscribe", subscriptionRequest);
        return { channel, roomId };
    }
    async remove(connection, roomId) {
        if (!this._application.started) {
            throw runtimeError.get("unavailable_before_start", "subscriptions.remove");
        }
        await global.kuzzle.ask("core:realtime:unsubscribe", connection.id, roomId);
    }
}
exports.BackendSubscription = BackendSubscription;
//# sourceMappingURL=backendSubscription.js.map