import { Koncorde } from "../shared/KoncordeWrapper";
import { Client } from "@elastic/elasticsearch";
import { JSONObject } from "kuzzle-sdk";
import { EmbeddedSDK } from "../shared/sdk/embeddedSdk";
import { Mutex } from "../../util/mutex";
import { RequestContext, RequestInput, KuzzleRequest } from "../../../index";
import { BackendCluster } from "../backend";
export interface Repository {
    create(document: JSONObject, options: any): Promise<any>;
    createOrReplace(document: JSONObject, options: any): Promise<any>;
    delete(documentId: string, options: any): Promise<any>;
    get(documentId: string): Promise<any>;
    mGet(ids: string[]): Promise<any>;
    replace(document: JSONObject, options: any): Promise<any>;
    search(query: JSONObject, options: any): Promise<any>;
    update(document: JSONObject, options: any): Promise<any>;
}
export declare class PluginContext {
    accessors: {
        /**
         * Embedded SDK
         */
        sdk: EmbeddedSDK;
        /**
         * Trigger a custom plugin event
         */
        trigger: (eventName: string, payload: any) => Promise<any>;
        /**
         * Add or remove strategies dynamically
         */
        strategies: {
            /**
             * Adds a new authentication strategy
             */
            add: (name: string, properties: any) => Promise<void>;
            /**
             * Removes an authentication strategy, preventing new authentications from using it.
             */
            remove: (name: string) => Promise<void>;
        };
        /**
         * Accessor to the Data Validation API
         */
        validation: {
            addType: any;
            validate: any;
        };
        /**
         * Execute an API action.
         *
         * @deprecated use "accessors.sdk" instead (unless you need the original context)
         */
        execute: (request: KuzzleRequest, callback?: any) => Promise<KuzzleRequest>;
        /**
         * Adds or removes realtime subscriptions from the backend.
         */
        subscription: {
            /**
             * Registers a new realtime subscription on behalf of a client.
             */
            register: (connectionId: string, index: string, collection: string, filters: JSONObject) => Promise<{
                roomId: string;
            }>;
            /**
             * Removes a realtime subscription on an existing `roomId` and `connectionId`
             */
            unregister: (connectionId: string, roomId: string, notify: boolean) => Promise<void>;
        };
        /**
         * Initializes the plugin's private data storage.
         */
        storage: {
            /**
             * Initializes the plugin storage
             */
            bootstrap: (collections: any) => Promise<void>;
            /**
             * Creates a collection in the plugin storage
             */
            createCollection: (collection: string, mappings: any) => Promise<void>;
        };
        /**
         * Cluster accessor
         * @type {BackendCluster}
         */
        cluster: BackendCluster;
        /**
         * Current Kuzzle node unique identifier
         */
        nodeId: string;
    };
    config: JSONObject;
    constructors: {
        /**
         * @todo need documentation
         */
        BaseValidationType: any;
        /**
         * @deprecated import directly: `import { Koncorde } from 'kuzzle'`
         */
        Koncorde: Koncorde;
        /**
         * Mutex class
         */
        Mutex: typeof Mutex;
        /**
         * Plugin private storage space
         */
        Repository: new (collection: string, objectConstructor: any) => Repository;
        /**
         * Instantiate a new Request from the original one.
         */
        Request: KuzzleRequest;
        /**
         * @deprecated import directly: `import { RequestContext } from 'kuzzle'`
         */
        RequestContext: RequestContext;
        /**
         * @deprecated import directly: `import { RequestInput } from 'kuzzle'`
         */
        RequestInput: RequestInput;
        /**
         * Constructor for Elasticsearch SDK Client
         */
        ESClient: typeof Client;
    };
    /**
     * @deprecated import directly: `import { BadRequestError, ... } from 'kuzzle'`
     */
    errors: any;
    /**
     * Errors manager
     */
    kerror: any;
    /**
     * @deprecated use `PluginContext.kerror` instead
     */
    errorsManager: any;
    /**
     * Decrypted secrets from Kuzzle Vault
     */
    secrets: JSONObject;
    /**
     * Internal Logger
     */
    log: {
        debug: (message: any) => void;
        error: (message: any) => void;
        info: (message: any) => void;
        silly: (message: any) => void;
        verbose: (message: any) => void;
        warn: (message: any) => void;
    };
    constructor(pluginName: any);
}
