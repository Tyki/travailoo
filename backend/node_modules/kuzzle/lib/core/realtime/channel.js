"use strict";
/*
 * Kuzzle, a backend software, self-hostable and ready to use
 * to power modern apps
 *
 * Copyright 2015-2022 Kuzzle
 * mailto: support AT kuzzle.io
 * website: http://kuzzle.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Channel = void 0;
const kerror = __importStar(require("../../kerror"));
const realtimeError = kerror.wrap("core", "realtime");
/**
 * A channel define how notifications should be send for a particular realtime
 * room.
 *
 * Channel names are sent back to users who subscribe to realtime notification,
 * then each notification sent to them contains the associated channel.
 *
 * It allows to makes two subscriptions on index + collection + filters but one
 * for documents entering the scope and the other for documents exiting the scope
 * for example.
 *
 * Channels define with more granularity if a room notification should be sent:
 *  - is the document entering or leaving the scope
 *  - should I notify when users join or leave the room
 *  - should I propagate the notification to other cluster nodes
 *
 * @property name
 * @property scope
 * @property users
 * @property cluster
 */
class Channel {
    /**
     * Dummy hash function since we only need to keep the channel configuration.
     *
     * This is 10x faster than murmur.
     */
    static hash(channel) {
        let str = "";
        switch (channel.users) {
            case "all":
                str += "1";
                break;
            case "in":
                str += "2";
                break;
            case "out":
                str += "3";
                break;
            case "none":
                str += "3";
                break;
        }
        switch (channel.cluster) {
            case true:
                str += "1";
                break;
            case false:
                str += "2";
                break;
        }
        switch (channel.scope) {
            case "all":
                str += "1";
                break;
            case "in":
                str += "2";
                break;
            case "out":
                str += "3";
                break;
        }
        return str;
    }
    constructor(roomId, { scope = "all", users = "none", propagate = true, } = {}) {
        this.scope = scope;
        this.users = users;
        this.cluster = propagate;
        if (!Channel.SCOPE_ALLOWED_VALUES.includes(this.scope)) {
            throw realtimeError.get("invalid_scope");
        }
        if (!Channel.USERS_ALLOWED_VALUES.includes(this.users)) {
            throw realtimeError.get("invalid_users");
        }
        this.name = `${roomId}-${Channel.hash(this)}`;
    }
}
exports.Channel = Channel;
Channel.USERS_ALLOWED_VALUES = ["all", "in", "out", "none"];
Channel.SCOPE_ALLOWED_VALUES = Channel.USERS_ALLOWED_VALUES;
//# sourceMappingURL=channel.js.map