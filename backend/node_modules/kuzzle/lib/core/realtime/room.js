"use strict";
/*
 * Kuzzle, a backend software, self-hostable and ready to use
 * to power modern apps
 *
 * Copyright 2015-2022 Kuzzle
 * mailto: support AT kuzzle.io
 * website: http://kuzzle.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Room = void 0;
/**
 * A room represents a subscription scope made on a combination of:
 *  - index
 *  - collection
 *  - filters
 *
 * A room may contain differents channels that describe which notifications should
 * be sent. (e.g. only document leaving the scope, users joining the room)
 *
 * The rooms also contains the list of connections who subscribed to it.
 *
 * @property id
 * @property index
 * @property collection
 * @property connections
 * @property channels
 */
class Room {
    constructor(id, index, collection, channels, connections) {
        /**
         * List of connections subscribing to this room.
         */
        this.connections = new Set();
        /**
         * Map of channels configuration for this room.
         *
         * Map<channel, Channel>
         *
         * @example
         *
         * channels: {
         *   '<channel>': {
         *
         *     // request scope filter, default: 'all'
         *     scope: 'all|in|out|none',
         *
         *     // filter users notifications, default: 'none'
         *     users: 'all|in|out|none',
         *
         *     // should propagate notification to the cluster
         *     // (used for plugin subscriptions)
         *     cluster: true|false
         *   }
         * },
         */
        this.channels = new Map();
        this.id = id;
        this.index = index;
        this.collection = collection;
        if (channels) {
            this.channels = channels;
        }
        if (connections) {
            this.connections = connections;
        }
    }
    /**
     * Number of connections subscribing to the room
     */
    get size() {
        return this.connections.size;
    }
    /**
     * Creates a new configuration channel on the room if it doesn't already exists
     */
    createChannel(channel) {
        if (this.channels.has(channel.name)) {
            return;
        }
        this.channels.set(channel.name, channel);
    }
    addConnection(connectionId) {
        this.connections.add(connectionId);
    }
    removeConnection(connectionId) {
        this.connections.delete(connectionId);
    }
}
exports.Room = Room;
//# sourceMappingURL=room.js.map