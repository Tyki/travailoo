"use strict";
/*
 * Kuzzle, a backend software, self-hostable and ready to use
 * to power modern apps
 *
 * Copyright 2015-2022 Kuzzle
 * mailto: support AT kuzzle.io
 * website: http://kuzzle.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const lodash_1 = __importDefault(require("lodash"));
const rights_1 = __importDefault(require("./rights"));
const kerror = __importStar(require("../../kerror"));
/**
 * @class User
 */
class User {
    constructor() {
        this._id = null;
        this.profileIds = [];
    }
    /**
     * @returns {Promise<Profile[]>}
     */
    getProfiles() {
        if (!global.kuzzle) {
            return kerror.reject("security", "user", "uninitialized", this._id);
        }
        return global.kuzzle.ask("core:security:profile:mGet", this.profileIds);
    }
    /**
     * @returns {Promise}
     */
    async getRights() {
        const profiles = await this.getProfiles();
        const results = await Promise.all(profiles.map((p) => p.getRights()));
        const rights = {};
        results.forEach((right) => lodash_1.default.assignWith(rights, right, rights_1.default.merge));
        return rights;
    }
    /**
     * @param {Request} request
     * @returns {Promise.<boolean>}
     */
    async isActionAllowed(request) {
        if (this.profileIds === undefined || this.profileIds.length === 0) {
            return false;
        }
        const targets = request.getArray("targets", []);
        const profiles = await this.getProfiles();
        if (targets.length === 0) {
            for (const profile of profiles) {
                if (await profile.isActionAllowed(request)) {
                    return true;
                }
            }
            return false;
        }
        // Every target must be allowed by at least one profile
        return this.areTargetsAllowed(request, profiles, targets);
    }
    /**
     * Verifies that every targets are allowed by at least one profile,
     * while skipping the ones that includes a wildcard since they will be expanded
     * later on, based on index and collections authorized for the given user.
     */
    async areTargetsAllowed(request, profiles, targets) {
        const profilesPolicies = await Promise.all(profiles.map((profile) => profile.getAllowedPolicies(request)));
        // Every target must be allowed by at least one profile
        for (const target of targets) {
            // Skip targets with no Index or Collection
            if (!target.index || !target.collections) {
                continue;
            }
            // TODO: Support Wildcard
            if (target.index.includes("*")) {
                return false;
            }
            for (const collection of target.collections) {
                // TODO: Support Wildcard
                if (collection.includes("*")) {
                    return false;
                }
                const isTargetAllowed = profilesPolicies.some((policies) => policies.some((policy) => policy.role.checkRestrictions(target.index, collection, policy.restrictedTo)));
                if (!isTargetAllowed) {
                    return false;
                }
            }
        }
        return true;
    }
}
exports.User = User;
//# sourceMappingURL=user.js.map