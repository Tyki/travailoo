"use strict";
/*
 * Kuzzle, a backend software, self-hostable and ready to use
 * to power modern apps
 *
 * Copyright 2015-2022 Kuzzle
 * mailto: support AT kuzzle.io
 * website: http://kuzzle.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrap = exports.getFrom = exports.reject = exports.get = exports.rawWrap = exports.rawGetFrom = exports.rawReject = exports.rawGet = void 0;
const util_1 = require("util");
const lodash_1 = __importDefault(require("lodash"));
const codes_1 = require("./codes");
const errors = __importStar(require("./errors"));
/**
 * Gets this file name in the exact same format than the one printed in the
 * stacktraces (used to clean kerror lines from stacktraces)
 */
let _currentFileName = null;
function _getCurrentFileName() {
    if (_currentFileName !== null) {
        return _currentFileName;
    }
    _currentFileName = module.filename.substr(process.cwd().length + 1);
    return _currentFileName;
}
/**
 * Construct and return the corresponding error
 *
 * @param  domains - Domains object with subDomains and error names
 * @param  domain - Domain (eg: 'external')
 * @param  subdomain - Subdomain (eg: 'elasticsearch')
 * @param  error - Error name: (eg: 'index_not_found')
 * @param  placeholders - Placeholders value to inject in error message
 * @param  options - Last param can be additional options { message }
 */
function rawGet(domains, domain, subdomain, error, ...placeholders) {
    let options = {};
    // extract options object from the placeholders
    if (lodash_1.default.isPlainObject(placeholders[placeholders.length - 1])) {
        options = placeholders.pop();
    }
    const kuzzleError = lodash_1.default.get(domains, `${domain}.subDomains.${subdomain}.errors.${error}`);
    if (!kuzzleError) {
        return get("core", "fatal", "unexpected_error", `${domain}.${subdomain}.${error}`);
    }
    let body = null;
    if (kuzzleError.class === "PartialError" ||
        kuzzleError.class === "MultipleErrorsError") {
        body = placeholders.splice(-1)[0];
    }
    const message = options.message || (0, util_1.format)(kuzzleError.message, ...placeholders);
    const id = `${domain}.${subdomain}.${error}`;
    const code = (domains[domain].code << 24) |
        (domains[domain].subDomains[subdomain].code << 16) |
        domains[domain].subDomains[subdomain].errors[error].code;
    let kerror;
    if (kuzzleError.class === "PartialError" ||
        kuzzleError.class === "MultipleErrorsError") {
        kerror = new errors[kuzzleError.class](message, body, id, code);
    }
    else if (kuzzleError.class === "KuzzleError") {
        const status = kuzzleError.status || 500;
        kerror = new errors.KuzzleError(message, status, id, code);
    }
    else {
        kerror = new errors[kuzzleError.class](message, id, code);
    }
    kerror.props = placeholders;
    if (kuzzleError.class !== "InternalError") {
        cleanStackTrace(kerror);
    }
    return kerror;
}
exports.rawGet = rawGet;
/**
 * Removes the first lines of the stacktrace because they are related
 * to internal mechanisms.
 *
 * e.g.
 *  at new PluginImplementationError (
 *  at get (lib/kerror/index.js:70:14)
 *  at Object.get (lib/kerror/index.js:146:38) // only for wrapped kerror objects
 *  // Line that triggered the error =>
 *  at ControllerManager.add (kuzzle/lib/core/backend/backend.ts:226:34)
 */
function cleanStackTrace(error) {
    // Keep the original error message
    const messageLength = error.message.split("\n").length;
    const currentFileName = _getCurrentFileName();
    // we keep the new error instantiation line ("new ...Error (") on purpose:
    // this will allow us to replace it without inserting a new line in the array,
    // saving us from building a new array
    const newStack = error.stack.split("\n").filter((line, index) => {
        if (index < messageLength) {
            return true;
        }
        // filter all lines related to the kerror object
        return !line.includes(currentFileName);
    });
    // insert a deletion message in place of the new error instantiation line
    newStack[messageLength] = "      [...Kuzzle internal calls deleted...]";
    error.stack = newStack.join("\n");
}
/**
 * Returns a promise rejected with the corresponding error
 *
 * @param  domains - Domains object with subDomains and error names
 * @param  domain - Domain (eg: 'external')
 * @param  subdomain - Subdomain (eg: 'elasticsearch')
 * @param  error - Error name: (eg: 'index_not_found')
 * @param  placeholders - Placeholders value to inject in error message
 */
function rawReject(domains, domain, subdomain, error, ...placeholders) {
    return Promise.reject(rawGet(domains, domain, subdomain, error, ...placeholders));
}
exports.rawReject = rawReject;
/**
 * Construct and return the corresponding error, with its stack
 * trace derivated from a provided source error
 *
 * @param  domains - Domains object with subDomains and error names
 * @param  source - Original error
 * @param  domain - Domain (eg: 'external')
 * @param  subdomain - Subdomain (eg: 'elasticsearch')
 * @param  error - Error name: (eg: 'index_not_found')
 * @param  placeholders - Placeholders value to inject in error message
 */
function rawGetFrom(domains, source, domain, subdomain, error, ...placeholders) {
    const derivedError = rawGet(domains, domain, subdomain, error, ...placeholders);
    // If a stacktrace is present, we need to modify the first line because it
    // still contains the original error message
    if (derivedError.stack && derivedError.stack.length && source.stack) {
        const stackArray = source.stack.split("\n");
        stackArray.shift();
        derivedError.stack = [
            `${derivedError.constructor.name}: ${derivedError.message}`,
            ...stackArray,
        ].join("\n");
    }
    return derivedError;
}
exports.rawGetFrom = rawGetFrom;
/**
 * Wrap error functions with the provided domain and subdomain.
 */
function rawWrap(domains, domain, subdomain) {
    return {
        get: (error, ...placeholders) => rawGet(domains, domain, subdomain, error, ...placeholders),
        getFrom: (source, error, ...placeholders) => rawGetFrom(domains, source, domain, subdomain, error, ...placeholders),
        reject: (error, ...placeholders) => rawReject(domains, domain, subdomain, error, ...placeholders),
    };
}
exports.rawWrap = rawWrap;
/**
 * Construct and return the corresponding error
 *
 * @param  domain - Domain (eg: 'external')
 * @param  subdomain - Subdomain (eg: 'elasticsearch')
 * @param  error - Error name: (eg: 'index_not_found')
 * @param  placeholders - Placeholders value to inject in error message
 * @param  options - Last param can be additional options { message }
 */
function get(domain, subdomain, error, ...placeholders) {
    return rawGet(codes_1.domains, domain, subdomain, error, ...placeholders);
}
exports.get = get;
/**
 * Returns a promise rejected with the corresponding error
 *
 * @param  domain - Domain (eg: 'external')
 * @param  subdomain - Subdomain (eg: 'elasticsearch')
 * @param  error - Error name: (eg: 'index_not_found')
 * @param  placeholders - Placeholders value to inject in error message
 */
function reject(domain, subdomain, error, ...placeholders) {
    return rawReject(codes_1.domains, domain, subdomain, error, ...placeholders);
}
exports.reject = reject;
/**
 * Construct and return the corresponding error, with its stack
 * trace derivated from a provided source error
 *
 * @param  source - Original error
 * @param  domain - Domain (eg: 'external')
 * @param  subdomain - Subdomain (eg: 'elasticsearch')
 * @param  error - Error name: (eg: 'index_not_found')
 * @param  placeholders - Placeholders value to inject in error message
 */
function getFrom(source, domain, subdomain, error, ...placeholders) {
    return rawGetFrom(codes_1.domains, source, domain, subdomain, error, ...placeholders);
}
exports.getFrom = getFrom;
/**
 * Wrap error functions with the provided domain and subdomain.
 */
function wrap(domain, subdomain) {
    return {
        get: (error, ...placeholders) => get(domain, subdomain, error, ...placeholders),
        getFrom: (source, error, ...placeholders) => getFrom(source, domain, subdomain, error, ...placeholders),
        reject: (error, ...placeholders) => reject(domain, subdomain, error, ...placeholders),
    };
}
exports.wrap = wrap;
//# sourceMappingURL=index.js.map