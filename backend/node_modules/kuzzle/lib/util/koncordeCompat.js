"use strict";
/*
 * Kuzzle, a backend software, self-hostable and ready to use
 * to power modern apps
 *
 * Copyright 2015-2022 Kuzzle
 * mailto: support AT kuzzle.io
 * website: http://kuzzle.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIndexes = exports.getCollections = exports.koncordeTest = exports.fromKoncordeIndex = exports.toKoncordeIndex = void 0;
/*
  Set of utility functions meant to ease up the use of Koncorde v4 in Kuzzle
 */
const lodash_1 = require("lodash");
// No collision possible: "/" is forbidden in index (or collection) names
const SEPARATOR = "/";
/**
 * Builds a Koncorde v4 index name from the old fashioned index+collection
 * arguments
 *
 * @param {string} index
 * @param {string} collection
 * @return {string}
 */
function toKoncordeIndex(index, collection) {
    return `${index}${SEPARATOR}${collection}`;
}
exports.toKoncordeIndex = toKoncordeIndex;
/**
 * Returns an index+collection pair from a Koncorde v4 index name
 *
 * @param {string} index - Koncorde v4 index name
 * @return {{index: string, collection: string}}
 */
function fromKoncordeIndex(index) {
    const [kindex, kcollection] = index.split(SEPARATOR);
    return {
        collection: kcollection,
        index: kindex,
    };
}
exports.fromKoncordeIndex = fromKoncordeIndex;
/**
 * Quick compat method to start a Koncorde test
 *
 * @param {Koncorde} koncorde instance
 * @param {string} index
 * @param {string} collection
 * @param {JSONObject} body
 * @param {string} [_id]
 */
function koncordeTest(koncorde, index, collection, body, _id) {
    const indexV4 = toKoncordeIndex(index, collection);
    // Koncorde v4 silently accepts the old "ids" keyword, but it is now
    // an undocumented feature, left there so that Kuzzle can use Koncorde v4
    // without breaking changes. But Kuzzle now have to inject the "_id" field
    // necessary for that "ids" keyword.
    const data = _id ? Object.assign({}, body, { _id }) : body;
    return koncorde.test(data, indexV4);
}
exports.koncordeTest = koncordeTest;
/**
 * Extracts the list of Koncorde indexes and translate them into a
 * Kuzzle collections list
 *
 * @param  {Koncorde} koncorde
 * @param  {string}   index - Kuzzle index name
 * @return {string[]}
 */
function getCollections(koncorde, index) {
    const indexPrefix = `${index}${SEPARATOR}`;
    return koncorde
        .getIndexes()
        .filter((i) => i.startsWith(indexPrefix))
        .map((i) => i.substr(indexPrefix.length));
}
exports.getCollections = getCollections;
/**
 * Extracts the list of Koncorde indexes and translate them into a
 * Kuzzle indexes list
 *
 * @param  {Koncorde} koncorde
 * @return {string[]}
 */
function getIndexes(koncorde) {
    const indexes = koncorde
        .getIndexes()
        .filter((i) => i !== "(default)")
        .map((i) => i.substr(0, i.indexOf(SEPARATOR)));
    return (0, lodash_1.uniq)(indexes);
}
exports.getIndexes = getIndexes;
//# sourceMappingURL=koncordeCompat.js.map